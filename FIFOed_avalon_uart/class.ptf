#:-:
#:-: file: class.ptf
#:-: date: 2003.01.13 09:14:04
#:-: generated by a perl script
#:-:
# ###############################################################
# class.ptf for fifoed_avalon_uart
# 
# This PTF-file declares the Altera UART as an SOPC-Builder library
# component.  This file should appear in a component-directory with several
# "companion" files and directories.  If this component-directory is
# anywhere on the SOPC-Builder's library search-path, then the UART
# will be "discovered" as a library comonent and available for your
# use in systems.
# 
# The UART-in-particular has a wizard which is defined by a section of
# this PTF-file (below), and a generator-program which happens to be
# built on the "Europa" object-library.
# 
# ###############################################################
   CLASS fifoed_avalon_uart
   {
      SDK_GENERATION 
      {
         SDK_FILES 0
         {
            cpu_architecture = "always";
            printf_txchar_routine = "nr_uart_txchar";
            printf_rxchar_routine = "nr_uart_rxchar";
         }
         SDK_FILES 1
         {
            cpu_architecture = "nios";
            c_structure_type = "np_uart *";
            short_type = "uart";
            c_header_file = "sdk/uart_struct.h";
            asm_header_file = "sdk/uart_struct.s";
            sdk_files_dir = "sdk";
         }
         SDK_FILES 3
         {
            cpu_architecture = "arm922t";
            toolchain = "gnu";
            asm_header_file = "sdk/uart_struct.s";
         }
      }
      ASSOCIATED_FILES 
      {
         Add_Program = "default";
         Edit_Program = "default";
         Generator_Program = "em_uart.pl";
         Software_Rebuild_Program = "em_uart.pl";
      }
      MODULE_DEFAULTS 
      {
         class = "fifoed_avalon_uart";
         class_version = "7.1";
         SLAVE s1
         {
            SYSTEM_BUILDER_INFO
            {
               Bus_Type = "avalon";
               Is_Printable_Device = "1";
               Address_Alignment = "native";
               Address_Width = "3";
               Data_Width = "16";
               Read_Wait_States = "1";
               Write_Wait_States = "1";
            }
            PORT_WIRING
            {
# The number and kind of ports that appear on this module
# depends on the user's wizard-choices.
# This section will be filled-in by the Generator_Program
# after the module logic has been created and the ports are known.
#
               PORT clk
               {
                  type = "clk";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT reset_n
               {
                  type = "reset_n";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT address
               {
                  type = "address";
                  width = "3";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT begintransfer
               {
                  type = "begintransfer";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT chipselect
               {
                  type = "chipselect";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT read_n
               {
                  type = "read_n";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }

               PORT write_n
               {
                  type = "write_n";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
               PORT writedata
               {
                  type = "writedata";
                  width = "16";
                  direction = "input";
                  Is_Enabled = "1";
               }

               PORT dataavailable
               {
                  type = "dataavailable";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "1";
               }
               PORT irq
               {
                  type = "irq";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "1";
               }
               PORT readdata
               {
                  type = "readdata";
                  width = "16";
                  direction = "output";
                  Is_Enabled = "1";
               }
               PORT readyfordata
               {
                  type = "readyfordata";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "1";
               }
            }
         }
         PORT_WIRING
         {
               PORT txd
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "1";
               }
               PORT rxd
               {
                  type = "export";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "1";
               }
 #              rxused", ($rx_fifo_address_bits + 1), "out"
               PORT rxused
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "0";
               }
               PORT txused
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "0";
               }
               PORT transmitting
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "0";
               }
               PORT cts_n
               {
                  type = "export";
                  width = "1";
                  direction = "input";
                  Is_Enabled = "0";
               }
               PORT rts_n
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "0";
               }
               PORT irqexport
               {
                  type = "export";
                  width = "1";
                  direction = "output";
                  Is_Enabled = "0";
               }
         }
         SYSTEM_BUILDER_INFO
         {
            Instantiate_In_System_Module = "1";
            Is_Enabled = "1";
         }
         SIMULATION 
         {
            DISPLAY 
            {
               SIGNAL a
               {
                  name = "  Bus Interface";
                  format = "Divider";
               }
               SIGNAL b
               {
                  name = "chipselect";
               }
               SIGNAL c
               {
                  name = "address";
                  radix = "hexadecimal";
               }
               SIGNAL d
               {
                  name = "writedata";
                  radix = "hexadecimal";
               }
               SIGNAL e
               {
                  name = "readdata";
                  radix = "hexadecimal";
               }
               SIGNAL f
               {
                  name = "  Internals";
                  format = "Divider";
               }
               SIGNAL g
               {
                  name = "tx_ready";
               }
               SIGNAL h
               {
                  name = "tx_data";
                  radix = "ascii";
               }
               SIGNAL i
               {
                  name = "rx_char_ready";
               }
               SIGNAL j
               {
                  name = "rx_data";
                  radix = "ascii";
               }
            }
            INTERACTIVE_OUT log
            {
               enable = "0";
               file = "_log_module.txt"; # suffix to $module_name in em_uart.pl
               radix = "ascii";
               signals = "temp,list";
               exe = "perl -- tail-f.pl";
            }
            INTERACTIVE_IN drive
            {
               enable = "0"; # file descriptors are really just suffixes used by perl...
               file = "_input_data_stream.dat";
               mutex = "_input_data_mutex.dat";
               log = "_in.log";
               rate = "100";
               signals = "temp,list";
               exe = "perl -- uart.pl";
            }
         }
         WIZARD_SCRIPT_ARGUMENTS 
         {
			   use_tx_fifo = "0";
			   use_rx_fifo = "0";
            baud = "115200";
            data_bits = "8";
            fixed_baud = "1";
            parity = "N";
            stop_bits = "1";
            use_cts_rts = "0";
            use_eop_register = "0";
            sim_true_baud = "0";
            sim_char_stream = "";
	    use_fifo = "0";
	    fifo_size = "16";
	    fifo_export_used = "0";
	    export_irq="0";
	    hw_cts="0";
	    trans_pin="0";
	    fifo_size_tx="8";
	    fifo_size_rx="8";
         }
      }
      USER_INTERFACE 
      {
         USER_LABELS 
         {
            name = "FIFOed UART (RS-232 serial port)7.1";
            technology = "Interface Protocols/Serial";
         }
         LINKS
         {
            LINK help
            {
               title="Data Sheet";
               url="http://www.altera.com/literature/ds/ds_nios_uart.pdf";
            }
         }
         WIZARD_UI default
         {
            CONTEXT 
            {
               WSA = "WIZARD_SCRIPT_ARGUMENTS";
               INI = "SIMULATION/INTERACTIVE_IN drive";
               INO = "SIMULATION/INTERACTIVE_OUT log";		   
		   SBI = "SLAVE/SYSTEM_BUILDER_INFO";
            }
            DEBUG 
            {
            }
            title = "FIFOed Avalon UART - {{ $MOD }}";
            ACTION wizard_finish
            {
               $MOD/SYSTEM_BUILDER_INFO/View/Settings_Summary = "{{ $WSA/data_bits }}-bit UART with {{ $WSA/baud }} baud, <br>
                    {{ $WSA/stop_bits }} stop bits and {{ $WSA/parity }} parity";
               $MOD/SLAVE s1/PORT_WIRING/PORT irq/Is_Enabled = "{{ (!$WSA/export_irq ) }}";
               $MOD/PORT_WIRING/PORT irqexport/Is_Enabled = "{{ ($WSA/export_irq ) }}";
               $MOD/SLAVE s1/SYSTEM_BUILDER_INFO/Has_IRQ = "{{ !$WSA/export_irq  }}";
               $MOD/PORT_WIRING/PORT cts_n/Is_Enabled = "{{ ($WSA/hw_cts || $WSA/use_cts_rts) }}";
               $MOD/PORT_WIRING/PORT rts_n/Is_Enabled = "{{ ($WSA/use_cts_rts) }}";
               $MOD/PORT_WIRING/PORT rxused/Is_Enabled = "{{ ($WSA/fifo_export_used) }}";
               $MOD/PORT_WIRING/PORT txused/Is_Enabled = "{{ ($WSA/fifo_export_used) }}";
        dummy_dummy =   "{{$MOD/PORT_WIRING/PORT rxused/width = log2($WSA/fifo_size_rx); }}";
        dummy_dummy =   "{{$MOD/PORT_WIRING/PORT txused/width = log2($WSA/fifo_size_tx); }}";
               $MOD/PORT_WIRING/PORT transmitting/Is_Enabled = "{{ ($WSA/trans_pin) }}";




            }
            PAGES main
            {
               PAGE 1
               {
                  spacing = "10";
                  title = "Configuration";
                  GROUP baud
                  {
                     title = "Baud Rate";
                     spacing = "5";
                     align = "left";
                     COMBO rate
                     {
                        id="baud_rate";
                        title = "Baud Rate (bps): ";
                        editable = "1";
                        DATA 
                        {
                           baud = "$";
                        }
                        ITEM 
                        {
                           title = "115200";
                        }
                        ITEM 
                        {
                           title = "57600";
                        }
                        ITEM 
                        {
                           title = "38400";
                        }
                        ITEM 
                        {
                           title = "31250";
                        }
# midi rate, actually useful
                        ITEM 
                        {
                           title = "28800";
                        }
                        ITEM 
                        {
                           title = "19200";
                        }
                        ITEM 
                        {
                           title = "14400";
                        }
                        ITEM 
                        {
                           title = "9600";
                        }
                        ITEM 
                        {
                           title = "4800";
                        }
                        ITEM 
                        {
                           title = "2400";
                        }
                        ITEM 
                        {
                           title = "1200";
                        }
                        ITEM 
                        {
                           title = "300";
                        }
                     }
                     TEXT 
                     {
                        title = "Input Clock Frequency (MHz): {{ $SYS/clock_freq / 1E6 }}";
                     }
                     TEXT 
                     {
                        divisor = "{{ (($SYS/clock_freq / $WSA/baud) + 0.5) }}";
                        divisor_bits = "{{ ceil(log2($divisor)); }}";
                        min_baud = "{{ ceil($SYS/clock_freq / 65535); }}";
                        baud_too_low = "{{ $divisor_bits > 16 }}";
                        actual = "{{ $SYS/clock_freq / int($divisor) }}";
                        b_error = "{{ 100 * ($actual - $WSA/baud) / $WSA/baud }}";
                        round_err = "{{ int($b_error * 100) / 100 }}";
                        too_small = "{{ $round_err == 0 }}";
                        show_err = "{{ if ($too_small) '<0.01'; else $round_err }}";
                        title = "Baud error: {{ $show_err }}%";
                        valid = "{{ $b_error < 3.0 }}";
                        valid2 = "{{ $divisor_bits <= 16 }}";
                        foreground = "{{ if ($valid) 'black'; else 'red'; }}"; # if the following assignment is 'error' the user will be prevented from
# creating such a UART.
                        warning = "{{ if (!$valid) 'Baud error too large, UART may not function.'; }}";
                        error_msg = "Baud rate too low; must be >= {{ $min_baud }} baud";
                        error = "{{ if (!$valid2) $error_msg; }}";
                     }
                     GROUP 
                     {
                        height = "5";
                        width = "1";
                     }
#                     GROUP changeable
#                     {
#                        layout = "horizontal";
#                        spacing = "0";
                        CHECK opt
                        {
                           id="baud_rw";
                           title="&nbsp;Baud rate can be changed by software<br>&nbsp;&nbsp;(divisor register is writeable)";
                           DATA 
                           {
                              fixed_baud = "!$";
                           }
                        }
                        REM GROUP 
                        {
                           TEXT 
                           {
                              title = "Baud rate can be changed by software";
                           }
                           TEXT 
                           {
                              title = " (divisor register is writeable) ";
                           }
                        }
#                     }
                  }
                  GROUP mode
                  {
                     layout = "horizontal";
                     GROUP parity
                     {
                        title = "parity";
                        COMBO 
                        {
                           id = "mode_parity";
                           DATA 
                           {
                              parity = "$";
                           }
                           ITEM 
                           {
                              title = "None";
                              value = "N";
                           }
                           ITEM 
                           {
                              title = "Even";
                              value = "E";
                           }
                           ITEM 
                           {
                              title = "Odd";
                              value = "O";
                           }
                        }
                     }
                     GROUP databits
                     {
                        title = "data bits";
                        COMBO 
                        {
                           id = "mode_databits";
                           DATA 
                           {
                              data_bits = "$";
                           }
                           ITEM 
                           {
                              title = "7";
                           }
                           ITEM 
                           {
                              title = "8";
                           }
                           ITEM 
                           {
                              title = "9";
                           }
				   ITEM 
                           {
                              title = "10";
                           }

                        }
                     }
                     GROUP stopbits
                     {
                        title = "stop bits";
                        COMBO 
                        {
                           id = "mode_stopbits";
                           DATA 
                           {
                              stop_bits = "$";
                           }
                           ITEM 
                           {
                              title = "1";
                           }
                           ITEM 
                           {
                              title = "2";
                           }
                        }
                     }
                  }
                  GROUP flowcontrol
                  {
                     title = "Flow Control";
                     align = "left";
                     CHECK usehw
                     {
                        id = "use_flowcontrol";
                        title = "Include CTS/RTS pins and control register bits";
                        DATA 
                        {
                           use_cts_rts = "$";
                        }
                     }
                  }
                  GROUP dma
                  {
                     title = "Streaming Data (DMA) control";
                     align = "left";
                     CHECK eop
                     {
                        id = "use_dma_eop";
                        title = "Include end-of-packet register";
                        tooltip = "UART will automatically detect an end-of-packet character <br> and terminate a streaming (DMA) transfer.";
                        DATA 
                        {
                           use_eop_register = "$";
                        }
                     }
                  }
               }
               PAGE 2
               {
                  title = "FIFOs";
                  GROUP fifo
                  {
                     title = "FIFO usage   v0.2";
                     align = "left";

                     CHECK usetxfifo
                     {
                        id = "use_txfifo";
                        title = "Include transmit FIFOs";
								editable = "1";
                        DATA 
                        {
                           $WSA/use_tx_fifo = "$";
                        }





								GROUP fifo_tsz
                  		{
                     	 	  title = "TransmitFIFO";
                     		  align = "left";
                     		  COMBO tx_size
                     		  {
                        	      id="tx_fifo_size";
                        			title = "TX FIFO depth (words): ";
                        			editable = "1";
                        			enable = $use_tx_fifo;
                        			DATA
                        			{
                           			 	$WSA/fifo_size_tx = "$";
                        			}
                        			ITEM
                        			{
                           			title = "8";
                        			}
			                        ITEM
			                        {
			                           title = "16";
			                        }
			                        ITEM
			                        {
			                           title = "32";
			                        }
			                        ITEM
			                        {
			                           title = "64";
			                        }
			                        ITEM
			                        {
			                           title = "128";
			                        }
			                        ITEM
			                        {
			                           title = "256";
			                        }
			                        ITEM
			                        {
			                           title = "512";
			                        }
			                        ITEM
			                        {
			                           title = "1024";
			                        }
			                        ITEM
			                        {
			                           title = "2048";
			                        }
			                        ITEM
			                        {
			                           title = "4096";
			                        }
			                        ITEM
			                        {
			                           title = "8192";
			                        }
			                     }
			                     CHECK TX_LE
                     			{
                         	 	  id = "Tx";
                        		  title = "Use LE for fifo ";
                        		  enable = $use_tx_fifo;
                        		  DATA
                        		  {
                           		   	  tx_fifo_LE = "$";
                        		  }
                     		   }
                    	      }
                       }
                    	      CHECK userxfifo
                        {
                        id = "use_fifo";
                        title = "Include receive  FIFOs";
								editable = "1";
                        DATA
                        {
                           $WSA/use_rx_fifo = "$";
                        }
								GROUP fifo_rsz
                  		{
                     	 	  title = "Recieve FIFO";
			                     align = "left";
                     		  COMBO rx_size
                     		  {
			                        id="fifo_size_rx";
                        			title = "RX FIFO depth (words): ";
                        			editable = "1";
                        			enable = $use_rx_fifo;
                        			DATA
                        			{
                           			 	$WSA/fifo_size_rx = "$";
                        			}
                        			ITEM
                        			{
                           			title = "8";
                        			}
			                        ITEM
			                        {
			                           title = "16";
			                        }
			                        ITEM
			                        {
			                           title = "32";
			                        }
			                        ITEM
			                        {
			                           title = "64";
			                        }
			                        ITEM
			                        {
			                           title = "128";
			                        }
			                        ITEM
			                        {
			                           title = "256";
			                        }
			                        ITEM
			                        {
			                           title = "512";
			                        }
			                        ITEM
			                        {
			                           title = "1024";
			                        }
			                        ITEM
			                        {
			                           title = "2048";
			                        }
			                        ITEM
			                        {
			                           title = "4096";
			                        }
			                        ITEM
			                        {
			                           title = "8192";
			                        }
			                     }
			                     CHECK RX_LE
                     			{
                         	 	  id = "Rx";
                        		  title = "Use LE for fifo ";
                        		  enable = $use_rx_fifo;
                        		  DATA
                        		  {
                           		   	  rx_fifo_LE = "$";
                        		  }
                     			}
                          }
                        }
                         GROUP fifo_export
                  		{
                     	 	title = "FIFO export";
                     		align = "left";
                     		CHECK exportfifo
                     		{
                         	 	  id = "export_use_fifo";
                        		  title = "Export FIFO used signals ";
								  		  enable = "{{ ($WSA/use_rx_fifo==1 || $WSA/use_tx_fifo==1); }}";
                        		  DATA
                        		  {
                           		   	  fifo_export_used = "$";
                        		  }
                     		}
                     		CHECK combinefifo
                     		{
                         	 	  id = "combine_fifo";
                        		  title = "Combine TX and RX fifos into one ";
								  		  enable = "{{ ($WSA/use_rx_fifo==1 && $WSA/use_tx_fifo==1); }}";
                        		  DATA
                        		  {
                           		   	  combine_fifo = "$";
                        		  }
                     		}


		   				}
 		   			}
		       }
		PAGE 3
               {
                  title = "MISC";
                  GROUP misc
                  {
                     title = "Export IRQ pin   v0.1";
                     align = "left";
                     CHECK exportirq
                     {
                        id = "EXPORT IRQ ";
                        title = "Do not connect the irq to the Avalon Bus";
						editable = "1";
                        DATA 
                        {
#					$SBI/Has_IRQ = "!$";
                                 $WSA/export_irq = "$";
				}


				TEXT 
                     	{
                        	title = "Export the singal to the top level so it can be handled manually";
                     	}		
		   	     }
			}
			GROUP create_cts
                        {
                     	 	title = "CTS input";
                     		align = "left";
                     		CHECK create_cts

                     		{
                         	 	  id = "Create CTS signal";
                        		  title = "Create hardware CTS input ( only valid with fifos) ";
								  editable = use_fifo;
								  enable="{{ $use_fifo }}";
                        		  DATA
                        		  {
                           		   	  $WSA/hw_cts = "$";
                        		  }
                     		}
                        }
                        GROUP transmitting
                        {
                     	 	title = "Transmitting signal";
                     		align = "left";
                     		CHECK transmitting

                     		{
                         	 	  id = "Create transmitting signal";
                        		  title = "Create hardware which asserts only when uart is transmiting.  usefull for RS485";
                        		  DATA
                        		  {
                           		   	  $WSA/trans_pin  = "$";
                        		  }
                     		}
                        }

                     

 		   	 
		    }

               PAGE 4
               {
                  title = "Simulation";
                  GROUP input
                  {
                     align = "right";
                     title = "Simulated RXD-input character stream";
                     EDIT stream
                     {
                        id="sim_char_stream";
                        enable = "{{ ! $INI/enable }}";
                        DATA 
                        {
                           sim_char_stream = "$";
                        }
                        rows = "10";
                     }
                  }
                  GROUP interactive
                  {
                     title = "Prepare Interactive Windows";
                     align = "left";
                     CHECK output
                     {
                        id = "sim_interactive_output";
                        title = "Create Modelsim Alias to open streaming output window";
                        tooltip = "This interaction is not independent from Simulated Character Stream";
                        DATA 
                        {
                           $INO/enable = "$";
                        }
                     }
                     CHECK input
                     {
                        id = "sim_interactive_input";
                        title = "Create Modelsim Alias to open interactive stimulus window";
                        tooltip = "This interaction is not independent from Simulated Character Stream";
                        DATA 
                        {
                           $INI/enable = "$";
                        }
                     }
                  }
                  GROUP simbaud
                  {
                     title = "Simulated transmitter Baud Rate"; # this should be the default, but for some reason isn't:
                     align = "left";
                     RADIO accelerated
                     {
                        id = "sim_baud_accelerated";
                        title = "accelerated (use divisor = 2)";
                        DATA 
                        {
                           sim_true_baud = "0";
                        }
                     }
                     RADIO actual
                     {
                        id = "sim_baud_actual";
                        title = "actual (use true baud divisor)";
                        DATA 
                        {
                           sim_true_baud = "1";
                        }
                     }
                  }
               }
            }
         }
      }
   }
